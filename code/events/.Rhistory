installed.packages('bmem')
start(-0.4)*negemot +
fadj
#install.packages("bmem")
library(bmem)
model1 <- '
granting ~
b1*loyalty + b2*negemot + c1*control_vs_rebel + c2*nocause_vs_rebel +
start( 0.4)*loyalty +
start(-0.4)*negemot +
start(-0.1)*control_vs_rebel +
start(-0.1)*nocause_vs_rebel
loyalty ~
a1*control_vs_rebel + a4* nocause_vs_rebel +
start(-0.4)*control_vs_rebel +
start( 0.0)*nocause_vs_rebel
negemot ~
a2*nocause_vs_rebel + a3*control_vs_rebel
start( 0.0)*control_vs_rebel +
start(-0.4)*nocause_vs_rebel
'
indirect1 <- '
ind_loyalty := a1*b1
ind_negemot := a2*b2
'
set.seed(1)
ptm <- proc.time()
boot.normal <-power.boot(model1 , indirect1 , 100, nrep =2000, nboot =2000, parallel='multicore')
save(boot.normal, file="boot.normal.RData")
duration_n100_nrep1k_nboot1k <- proc.time() - ptm
save(duration_n100_nrep1k_nboot1k, file="boot.normal.duration.Rdata")
library(bmem)
install.packages('bmem')
#install.packages("bmem")
library(bmem)
model1 <- '
granting ~
b1*loyalty + b2*negemot + c1*control_vs_rebel + c2*nocause_vs_rebel +
start( 0.4)*loyalty +
start(-0.4)*negemot +
start(-0.1)*control_vs_rebel +
start(-0.1)*nocause_vs_rebel
loyalty ~
a1*control_vs_rebel + a4* nocause_vs_rebel +
start(-0.4)*control_vs_rebel +
start( 0.0)*nocause_vs_rebel
negemot ~
a2*nocause_vs_rebel + a3*control_vs_rebel
start( 0.0)*control_vs_rebel +
start(-0.4)*nocause_vs_rebel
'
indirect1 <- '
ind_loyalty := a1*b1
ind_negemot := a2*b2
'
set.seed(1)
ptm <- proc.time()
boot.normal <-power.boot(model1 , indirect1 , 100, nrep =2000, nboot =2000, parallel='multicore')
#install.packages("bmem")
library(bmem)
model1 <- '
granting ~
b1*loyalty + b2*negemot + c1*control_vs_rebel + c2*nocause_vs_rebel +
start( 0.4)*loyalty +
start(-0.4)*negemot +
start(-0.1)*control_vs_rebel +
start(-0.1)*nocause_vs_rebel
loyalty ~
a1*control_vs_rebel + a4* nocause_vs_rebel +
start(-0.4)*control_vs_rebel +
start( 0.0)*nocause_vs_rebel
negemot ~
a2*nocause_vs_rebel + a3*control_vs_rebel
start( 0.0)*control_vs_rebel +
start(-0.4)*nocause_vs_rebel
'
indirect1 <- '
ind_loyalty := a1*b1
ind_negemot := a2*b2
'
set.seed(1)
ptm <- proc.time()
boot.normal <-power.boot(model1 , indirect1 , 100, nrep =2000, nboot =2000, parallel='multicore', ncore=30)
#install.packages("bmem")
library(bmem)
model1 <- '
granting ~
b1*loyalty + b2*negemot + c1*control_vs_rebel + c2*nocause_vs_rebel +
start( 0.4)*loyalty +
start(-0.4)*negemot +
start(-0.1)*control_vs_rebel +
start(-0.1)*nocause_vs_rebel
loyalty ~
a1*control_vs_rebel + a4* nocause_vs_rebel +
start(-0.4)*control_vs_rebel +
start( 0.0)*nocause_vs_rebel
negemot ~
a2*nocause_vs_rebel + a3*control_vs_rebel
start( 0.0)*control_vs_rebel +
start(-0.4)*nocause_vs_rebel
'
indirect1 <- '
ind_loyalty := a1*b1
ind_negemot := a2*b2
'
set.seed(1)
ptm <- proc.time()
boot.normal <-power.boot(model1 , indirect1 , 100, nrep =2000, nboot =2000, parallel='multicore', ncore=16)
pwd
exit()
exit
exit()
htop
plot(5)
library(caret)
packages <- c("caret", "corrplot", "gbm", "plyr", "randomForest", "e1071",
"pROC", "DMwR","dplyr","pbkrtest","car","pbkrtest","doParallel","ROSE","repmis")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
lapply(packages, library, character.only = TRUE)
library(dplyr)
setwd('/home/lsnoek1/projects/PIOP1/bids/code/events')
# create categories
female.C <- matrix(nrow=4,ncol=12)
female.I <- matrix(nrow=4,ncol=12)
male.C <- matrix(nrow=4,ncol=12)
male.I <- matrix(nrow=4,ncol=12)
for (i in 1:4){
female.C[i,] <- seq(1, 12, 1) + i*100 #female congruent
female.I[i,] <- seq(401, 412, 1) + i*100 #female incongruent
male.I[i,] <- seq(13, 24, 1) + i*100 #male incongruent
male.C[i,] <- seq(413, 424, 1) + i*100 #male congruent
}
#combine overall categories
female <- cbind(female.C, female.I)
male <- cbind(male.C,male.I)
congruent <- cbind(female.C,male.C)
incongruent <- cbind(female.I,male.I)
# behavioral data
all = data.frame()
nsub <- 250
sub <- c(1:250)
n = sprintf("%03d", 1:nsub)
file_name = paste0("pi0",n[sub],"-piopgstroop.log")
i=1
files <- list.files("../../logs/gstroop/raw")
files <- list.files("../../logs/gstroop/raw")
if (any(files %in% file_name[i])) {
## find .log read it in and append it
# s149 has 5 extra rows op responses in the practice block for some reason... Need to be excluded.
if (i == 149){d <- read.delim(file= paste0("../../logs/gstroop/raw/",file_name[i]), skip = 10, header = F)
} else{
d <- read.delim(file= paste0("../../logs/gstroop/raw/",file_name[i]), skip = 5, header = F)
}
header <- scan(file = paste0("../../logs/gstroop/raw/",file_name[i]), skip = 3, nlines = 1, sep = "\t", what = character())
header[9] <- "Uncertainty2" #needs a unique name
colnames(d) <- header
# remove practice block
startexp <- match(255, d$Code)
t_scan <- d$Time[startexp]      # onset of scanner
d <- d[-(1:startexp), ]
# select only useful colums
d <- d %>%
select_(~Subject, ~Trial, ~`Event Type`, ~Code, ~Time, ~TTime, ~`Stim Type`)
# remove rows with 'pulse' and with Picture 99
d <- d[d$`Event Type`!="Pulse", ]
d <- d[!(d$`Event Type`=="Picture" & d$Code == 99), ]
# add condition
d$Category[d$Code %in% female] <- "female"
d$Category[d$Code %in% male] <- "male"
d$Condition[d$Code %in% congruent] <- "congruent"
d$Condition[d$Code %in% incongruent] <- "incongruent"
for (c in 1:nrow(d)){ # female = resp 2 (right), male = resp 1 (left)
d$Correct[c] <- ifelse(d$Category[c] == "female" & d$Code[c+1] == 2
| d$Category[c] == "male" & d$Code[c+1] == 1 ,1,0)
d$TTime[c] <- d$TTime[c+1]
d$response_hand[c] <- d$Code[c+1] #1 is left, 2 is right
c <- c+1}
# s209 missed the last trial, therefore there is no response to record, and TTime and Correct are NA...
if (i==209){
d$Correct[d$`Stim Type`=="miss"] <- 0
d$TTime[d$`Stim Type`=="miss"] <- 0
}
d <- d[!(d$`Event Type`=="Response"), ]
d$Number <- i
d$response_accuracy <- ifelse((d$`Stim Type`=="hit" & d$Correct==1),"correct","incorrect")
d$response_accuracy <- ifelse(d$`Stim Type`=="miss","miss",d$response_accuracy)
# dataframe with only relevant properties
data <- d %>%
select_(~Number, ~Time, ~TTime, ~`Stim Type`,~Category, ~Condition, ~Correct, ~response_hand, ~response_accuracy)
data$word_gender <- ifelse((data$Category=="male" & data$Condition=="congruent"),"male","female")
data$word_gender <- ifelse((data$Category=="female" & data$Condition == "incongruent"),"male",data$word_gender)
colnames(data) <- c("subject","onset","duration","stim_type","img_gender","trial_type","correct","response_hand","response_accuracy","word_gender")
# adjust onset to onset of scanner
data$onset <- data$onset - t_scan
data$onset <- data$onset/10000
data$response_time <- data$duration / 10000
#data$duration <- data$duration/10000
data$duration = 0.5
data$response_hand[data$response_accuracy == 'miss'] = 'n/a'
data$response_time[data$response_accuracy == 'miss'] = 'n/a'
#data$
data_format <- data.frame(data$onset,data$duration,data$trial_type,data$img_gender,data$word_gender,data$response_time,data$response_hand,data$response_accuracy)
colnames(data_format) <- c("onset","duration","trial_type","img_gender","word_gender","response_time","response_hand","response_accuracy")
}
data_format
